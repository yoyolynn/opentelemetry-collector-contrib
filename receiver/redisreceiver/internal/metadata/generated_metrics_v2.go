// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for redisreceiver metrics.
type MetricsSettings struct {
	RedisClientsBlocked                    MetricSettings `mapstructure:"redis.clients.blocked"`
	RedisClientsConnected                  MetricSettings `mapstructure:"redis.clients.connected"`
	RedisClientsMaxInputBuffer             MetricSettings `mapstructure:"redis.clients.max_input_buffer"`
	RedisClientsMaxOutputBuffer            MetricSettings `mapstructure:"redis.clients.max_output_buffer"`
	RedisCommands                          MetricSettings `mapstructure:"redis.commands"`
	RedisCommandsProcessed                 MetricSettings `mapstructure:"redis.commands.processed"`
	RedisConnectionsReceived               MetricSettings `mapstructure:"redis.connections.received"`
	RedisConnectionsRejected               MetricSettings `mapstructure:"redis.connections.rejected"`
	RedisCPUTime                           MetricSettings `mapstructure:"redis.cpu.time"`
	RedisDbAvgTTL                          MetricSettings `mapstructure:"redis.db.avg_ttl"`
	RedisDbExpires                         MetricSettings `mapstructure:"redis.db.expires"`
	RedisDbKeys                            MetricSettings `mapstructure:"redis.db.keys"`
	RedisKeysEvicted                       MetricSettings `mapstructure:"redis.keys.evicted"`
	RedisKeysExpired                       MetricSettings `mapstructure:"redis.keys.expired"`
	RedisKeyspaceHits                      MetricSettings `mapstructure:"redis.keyspace.hits"`
	RedisKeyspaceMisses                    MetricSettings `mapstructure:"redis.keyspace.misses"`
	RedisLatencystatP100                   MetricSettings `mapstructure:"redis.latencystat.p100"`
	RedisLatencystatP50                    MetricSettings `mapstructure:"redis.latencystat.p50"`
	RedisLatencystatP90                    MetricSettings `mapstructure:"redis.latencystat.p90"`
	RedisLatencystatP99                    MetricSettings `mapstructure:"redis.latencystat.p99"`
	RedisLatencystatP999                   MetricSettings `mapstructure:"redis.latencystat.p99.9"`
	RedisLatestFork                        MetricSettings `mapstructure:"redis.latest_fork"`
	RedisMemoryFragmentationRatio          MetricSettings `mapstructure:"redis.memory.fragmentation_ratio"`
	RedisMemoryLua                         MetricSettings `mapstructure:"redis.memory.lua"`
	RedisMemoryPeak                        MetricSettings `mapstructure:"redis.memory.peak"`
	RedisMemoryRss                         MetricSettings `mapstructure:"redis.memory.rss"`
	RedisMemoryUsed                        MetricSettings `mapstructure:"redis.memory.used"`
	RedisNetInput                          MetricSettings `mapstructure:"redis.net.input"`
	RedisNetOutput                         MetricSettings `mapstructure:"redis.net.output"`
	RedisRdbChangesSinceLastSave           MetricSettings `mapstructure:"redis.rdb.changes_since_last_save"`
	RedisReplicationBacklogFirstByteOffset MetricSettings `mapstructure:"redis.replication.backlog_first_byte_offset"`
	RedisReplicationOffset                 MetricSettings `mapstructure:"redis.replication.offset"`
	RedisSlavesConnected                   MetricSettings `mapstructure:"redis.slaves.connected"`
	RedisUptime                            MetricSettings `mapstructure:"redis.uptime"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		RedisClientsBlocked: MetricSettings{
			Enabled: true,
		},
		RedisClientsConnected: MetricSettings{
			Enabled: true,
		},
		RedisClientsMaxInputBuffer: MetricSettings{
			Enabled: true,
		},
		RedisClientsMaxOutputBuffer: MetricSettings{
			Enabled: true,
		},
		RedisCommands: MetricSettings{
			Enabled: true,
		},
		RedisCommandsProcessed: MetricSettings{
			Enabled: true,
		},
		RedisConnectionsReceived: MetricSettings{
			Enabled: true,
		},
		RedisConnectionsRejected: MetricSettings{
			Enabled: true,
		},
		RedisCPUTime: MetricSettings{
			Enabled: true,
		},
		RedisDbAvgTTL: MetricSettings{
			Enabled: true,
		},
		RedisDbExpires: MetricSettings{
			Enabled: true,
		},
		RedisDbKeys: MetricSettings{
			Enabled: true,
		},
		RedisKeysEvicted: MetricSettings{
			Enabled: true,
		},
		RedisKeysExpired: MetricSettings{
			Enabled: true,
		},
		RedisKeyspaceHits: MetricSettings{
			Enabled: true,
		},
		RedisKeyspaceMisses: MetricSettings{
			Enabled: true,
		},
		RedisLatencystatP100: MetricSettings{
			Enabled: true,
		},
		RedisLatencystatP50: MetricSettings{
			Enabled: true,
		},
		RedisLatencystatP90: MetricSettings{
			Enabled: true,
		},
		RedisLatencystatP99: MetricSettings{
			Enabled: true,
		},
		RedisLatencystatP999: MetricSettings{
			Enabled: true,
		},
		RedisLatestFork: MetricSettings{
			Enabled: true,
		},
		RedisMemoryFragmentationRatio: MetricSettings{
			Enabled: true,
		},
		RedisMemoryLua: MetricSettings{
			Enabled: true,
		},
		RedisMemoryPeak: MetricSettings{
			Enabled: true,
		},
		RedisMemoryRss: MetricSettings{
			Enabled: true,
		},
		RedisMemoryUsed: MetricSettings{
			Enabled: true,
		},
		RedisNetInput: MetricSettings{
			Enabled: true,
		},
		RedisNetOutput: MetricSettings{
			Enabled: true,
		},
		RedisRdbChangesSinceLastSave: MetricSettings{
			Enabled: true,
		},
		RedisReplicationBacklogFirstByteOffset: MetricSettings{
			Enabled: true,
		},
		RedisReplicationOffset: MetricSettings{
			Enabled: true,
		},
		RedisSlavesConnected: MetricSettings{
			Enabled: true,
		},
		RedisUptime: MetricSettings{
			Enabled: true,
		},
	}
}

type metricRedisClientsBlocked struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.clients.blocked metric with initial data.
func (m *metricRedisClientsBlocked) init() {
	m.data.SetName("redis.clients.blocked")
	m.data.SetDescription("Number of clients pending on a blocking call")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisClientsBlocked) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientsBlocked) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientsBlocked) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientsBlocked(settings MetricSettings) metricRedisClientsBlocked {
	m := metricRedisClientsBlocked{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisClientsConnected struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.clients.connected metric with initial data.
func (m *metricRedisClientsConnected) init() {
	m.data.SetName("redis.clients.connected")
	m.data.SetDescription("Number of client connections (excluding connections from replicas)")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisClientsConnected) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientsConnected) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientsConnected) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientsConnected(settings MetricSettings) metricRedisClientsConnected {
	m := metricRedisClientsConnected{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisClientsMaxInputBuffer struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.clients.max_input_buffer metric with initial data.
func (m *metricRedisClientsMaxInputBuffer) init() {
	m.data.SetName("redis.clients.max_input_buffer")
	m.data.SetDescription("Biggest input buffer among current client connections")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisClientsMaxInputBuffer) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientsMaxInputBuffer) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientsMaxInputBuffer) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientsMaxInputBuffer(settings MetricSettings) metricRedisClientsMaxInputBuffer {
	m := metricRedisClientsMaxInputBuffer{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisClientsMaxOutputBuffer struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.clients.max_output_buffer metric with initial data.
func (m *metricRedisClientsMaxOutputBuffer) init() {
	m.data.SetName("redis.clients.max_output_buffer")
	m.data.SetDescription("Longest output list among current client connections")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisClientsMaxOutputBuffer) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisClientsMaxOutputBuffer) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisClientsMaxOutputBuffer) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisClientsMaxOutputBuffer(settings MetricSettings) metricRedisClientsMaxOutputBuffer {
	m := metricRedisClientsMaxOutputBuffer{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisCommands struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.commands metric with initial data.
func (m *metricRedisCommands) init() {
	m.data.SetName("redis.commands")
	m.data.SetDescription("Number of commands processed per second")
	m.data.SetUnit("{ops}/s")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisCommands) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisCommands) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisCommands) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisCommands(settings MetricSettings) metricRedisCommands {
	m := metricRedisCommands{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisCommandsProcessed struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.commands.processed metric with initial data.
func (m *metricRedisCommandsProcessed) init() {
	m.data.SetName("redis.commands.processed")
	m.data.SetDescription("Total number of commands processed by the server")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisCommandsProcessed) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisCommandsProcessed) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisCommandsProcessed) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisCommandsProcessed(settings MetricSettings) metricRedisCommandsProcessed {
	m := metricRedisCommandsProcessed{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisConnectionsReceived struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.connections.received metric with initial data.
func (m *metricRedisConnectionsReceived) init() {
	m.data.SetName("redis.connections.received")
	m.data.SetDescription("Total number of connections accepted by the server")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisConnectionsReceived) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisConnectionsReceived) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisConnectionsReceived) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisConnectionsReceived(settings MetricSettings) metricRedisConnectionsReceived {
	m := metricRedisConnectionsReceived{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisConnectionsRejected struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.connections.rejected metric with initial data.
func (m *metricRedisConnectionsRejected) init() {
	m.data.SetName("redis.connections.rejected")
	m.data.SetDescription("Number of connections rejected because of maxclients limit")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisConnectionsRejected) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisConnectionsRejected) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisConnectionsRejected) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisConnectionsRejected(settings MetricSettings) metricRedisConnectionsRejected {
	m := metricRedisConnectionsRejected{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisCPUTime struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.cpu.time metric with initial data.
func (m *metricRedisCPUTime) init() {
	m.data.SetName("redis.cpu.time")
	m.data.SetDescription("System CPU consumed by the Redis server in seconds since server start")
	m.data.SetUnit("s")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisCPUTime) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, stateAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.State, pcommon.NewValueString(stateAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisCPUTime) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisCPUTime) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisCPUTime(settings MetricSettings) metricRedisCPUTime {
	m := metricRedisCPUTime{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisDbAvgTTL struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.db.avg_ttl metric with initial data.
func (m *metricRedisDbAvgTTL) init() {
	m.data.SetName("redis.db.avg_ttl")
	m.data.SetDescription("Average keyspace keys TTL")
	m.data.SetUnit("ms")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisDbAvgTTL) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, dbAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Db, pcommon.NewValueString(dbAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisDbAvgTTL) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisDbAvgTTL) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisDbAvgTTL(settings MetricSettings) metricRedisDbAvgTTL {
	m := metricRedisDbAvgTTL{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisDbExpires struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.db.expires metric with initial data.
func (m *metricRedisDbExpires) init() {
	m.data.SetName("redis.db.expires")
	m.data.SetDescription("Number of keyspace keys with an expiration")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisDbExpires) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, dbAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Db, pcommon.NewValueString(dbAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisDbExpires) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisDbExpires) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisDbExpires(settings MetricSettings) metricRedisDbExpires {
	m := metricRedisDbExpires{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisDbKeys struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.db.keys metric with initial data.
func (m *metricRedisDbKeys) init() {
	m.data.SetName("redis.db.keys")
	m.data.SetDescription("Number of keyspace keys")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisDbKeys) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, dbAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Db, pcommon.NewValueString(dbAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisDbKeys) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisDbKeys) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisDbKeys(settings MetricSettings) metricRedisDbKeys {
	m := metricRedisDbKeys{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisKeysEvicted struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.keys.evicted metric with initial data.
func (m *metricRedisKeysEvicted) init() {
	m.data.SetName("redis.keys.evicted")
	m.data.SetDescription("Number of evicted keys due to maxmemory limit")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisKeysEvicted) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisKeysEvicted) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisKeysEvicted) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisKeysEvicted(settings MetricSettings) metricRedisKeysEvicted {
	m := metricRedisKeysEvicted{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisKeysExpired struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.keys.expired metric with initial data.
func (m *metricRedisKeysExpired) init() {
	m.data.SetName("redis.keys.expired")
	m.data.SetDescription("Total number of key expiration events")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisKeysExpired) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisKeysExpired) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisKeysExpired) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisKeysExpired(settings MetricSettings) metricRedisKeysExpired {
	m := metricRedisKeysExpired{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisKeyspaceHits struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.keyspace.hits metric with initial data.
func (m *metricRedisKeyspaceHits) init() {
	m.data.SetName("redis.keyspace.hits")
	m.data.SetDescription("Number of successful lookup of keys in the main dictionary")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisKeyspaceHits) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisKeyspaceHits) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisKeyspaceHits) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisKeyspaceHits(settings MetricSettings) metricRedisKeyspaceHits {
	m := metricRedisKeyspaceHits{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisKeyspaceMisses struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.keyspace.misses metric with initial data.
func (m *metricRedisKeyspaceMisses) init() {
	m.data.SetName("redis.keyspace.misses")
	m.data.SetDescription("Number of failed lookup of keys in the main dictionary")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisKeyspaceMisses) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisKeyspaceMisses) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisKeyspaceMisses) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisKeyspaceMisses(settings MetricSettings) metricRedisKeyspaceMisses {
	m := metricRedisKeyspaceMisses{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisLatencystatP100 struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.latencystat.p100 metric with initial data.
func (m *metricRedisLatencystatP100) init() {
	m.data.SetName("redis.latencystat.p100")
	m.data.SetDescription("latency stat with percentile 100")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisLatencystatP100) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, commandAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Command, pcommon.NewValueString(commandAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisLatencystatP100) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisLatencystatP100) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisLatencystatP100(settings MetricSettings) metricRedisLatencystatP100 {
	m := metricRedisLatencystatP100{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisLatencystatP50 struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.latencystat.p50 metric with initial data.
func (m *metricRedisLatencystatP50) init() {
	m.data.SetName("redis.latencystat.p50")
	m.data.SetDescription("latency stat with percentile 50")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisLatencystatP50) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, commandAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Command, pcommon.NewValueString(commandAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisLatencystatP50) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisLatencystatP50) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisLatencystatP50(settings MetricSettings) metricRedisLatencystatP50 {
	m := metricRedisLatencystatP50{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisLatencystatP90 struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.latencystat.p90 metric with initial data.
func (m *metricRedisLatencystatP90) init() {
	m.data.SetName("redis.latencystat.p90")
	m.data.SetDescription("latency stat with percentile 90")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisLatencystatP90) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, commandAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Command, pcommon.NewValueString(commandAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisLatencystatP90) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisLatencystatP90) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisLatencystatP90(settings MetricSettings) metricRedisLatencystatP90 {
	m := metricRedisLatencystatP90{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisLatencystatP99 struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.latencystat.p99 metric with initial data.
func (m *metricRedisLatencystatP99) init() {
	m.data.SetName("redis.latencystat.p99")
	m.data.SetDescription("latency stat with percentile 99")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisLatencystatP99) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, commandAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Command, pcommon.NewValueString(commandAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisLatencystatP99) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisLatencystatP99) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisLatencystatP99(settings MetricSettings) metricRedisLatencystatP99 {
	m := metricRedisLatencystatP99{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisLatencystatP999 struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.latencystat.p99.9 metric with initial data.
func (m *metricRedisLatencystatP999) init() {
	m.data.SetName("redis.latencystat.p99.9")
	m.data.SetDescription("latency stat with percentile 99.9")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricRedisLatencystatP999) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, commandAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.Command, pcommon.NewValueString(commandAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisLatencystatP999) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisLatencystatP999) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisLatencystatP999(settings MetricSettings) metricRedisLatencystatP999 {
	m := metricRedisLatencystatP999{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisLatestFork struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.latest_fork metric with initial data.
func (m *metricRedisLatestFork) init() {
	m.data.SetName("redis.latest_fork")
	m.data.SetDescription("Duration of the latest fork operation in microseconds")
	m.data.SetUnit("us")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisLatestFork) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisLatestFork) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisLatestFork) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisLatestFork(settings MetricSettings) metricRedisLatestFork {
	m := metricRedisLatestFork{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisMemoryFragmentationRatio struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.memory.fragmentation_ratio metric with initial data.
func (m *metricRedisMemoryFragmentationRatio) init() {
	m.data.SetName("redis.memory.fragmentation_ratio")
	m.data.SetDescription("Ratio between used_memory_rss and used_memory")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisMemoryFragmentationRatio) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisMemoryFragmentationRatio) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisMemoryFragmentationRatio) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisMemoryFragmentationRatio(settings MetricSettings) metricRedisMemoryFragmentationRatio {
	m := metricRedisMemoryFragmentationRatio{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisMemoryLua struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.memory.lua metric with initial data.
func (m *metricRedisMemoryLua) init() {
	m.data.SetName("redis.memory.lua")
	m.data.SetDescription("Number of bytes used by the Lua engine")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisMemoryLua) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisMemoryLua) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisMemoryLua) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisMemoryLua(settings MetricSettings) metricRedisMemoryLua {
	m := metricRedisMemoryLua{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisMemoryPeak struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.memory.peak metric with initial data.
func (m *metricRedisMemoryPeak) init() {
	m.data.SetName("redis.memory.peak")
	m.data.SetDescription("Peak memory consumed by Redis (in bytes)")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisMemoryPeak) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisMemoryPeak) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisMemoryPeak) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisMemoryPeak(settings MetricSettings) metricRedisMemoryPeak {
	m := metricRedisMemoryPeak{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisMemoryRss struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.memory.rss metric with initial data.
func (m *metricRedisMemoryRss) init() {
	m.data.SetName("redis.memory.rss")
	m.data.SetDescription("Number of bytes that Redis allocated as seen by the operating system")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisMemoryRss) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisMemoryRss) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisMemoryRss) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisMemoryRss(settings MetricSettings) metricRedisMemoryRss {
	m := metricRedisMemoryRss{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisMemoryUsed struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.memory.used metric with initial data.
func (m *metricRedisMemoryUsed) init() {
	m.data.SetName("redis.memory.used")
	m.data.SetDescription("Total number of bytes allocated by Redis using its allocator")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisMemoryUsed) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisMemoryUsed) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisMemoryUsed) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisMemoryUsed(settings MetricSettings) metricRedisMemoryUsed {
	m := metricRedisMemoryUsed{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisNetInput struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.net.input metric with initial data.
func (m *metricRedisNetInput) init() {
	m.data.SetName("redis.net.input")
	m.data.SetDescription("The total number of bytes read from the network")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisNetInput) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisNetInput) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisNetInput) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisNetInput(settings MetricSettings) metricRedisNetInput {
	m := metricRedisNetInput{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisNetOutput struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.net.output metric with initial data.
func (m *metricRedisNetOutput) init() {
	m.data.SetName("redis.net.output")
	m.data.SetDescription("The total number of bytes written to the network")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisNetOutput) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisNetOutput) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisNetOutput) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisNetOutput(settings MetricSettings) metricRedisNetOutput {
	m := metricRedisNetOutput{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisRdbChangesSinceLastSave struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.rdb.changes_since_last_save metric with initial data.
func (m *metricRedisRdbChangesSinceLastSave) init() {
	m.data.SetName("redis.rdb.changes_since_last_save")
	m.data.SetDescription("Number of changes since the last dump")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisRdbChangesSinceLastSave) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisRdbChangesSinceLastSave) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisRdbChangesSinceLastSave) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisRdbChangesSinceLastSave(settings MetricSettings) metricRedisRdbChangesSinceLastSave {
	m := metricRedisRdbChangesSinceLastSave{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisReplicationBacklogFirstByteOffset struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.replication.backlog_first_byte_offset metric with initial data.
func (m *metricRedisReplicationBacklogFirstByteOffset) init() {
	m.data.SetName("redis.replication.backlog_first_byte_offset")
	m.data.SetDescription("The master offset of the replication backlog buffer")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisReplicationBacklogFirstByteOffset) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisReplicationBacklogFirstByteOffset) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisReplicationBacklogFirstByteOffset) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisReplicationBacklogFirstByteOffset(settings MetricSettings) metricRedisReplicationBacklogFirstByteOffset {
	m := metricRedisReplicationBacklogFirstByteOffset{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisReplicationOffset struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.replication.offset metric with initial data.
func (m *metricRedisReplicationOffset) init() {
	m.data.SetName("redis.replication.offset")
	m.data.SetDescription("The server's current replication offset")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricRedisReplicationOffset) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisReplicationOffset) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisReplicationOffset) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisReplicationOffset(settings MetricSettings) metricRedisReplicationOffset {
	m := metricRedisReplicationOffset{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisSlavesConnected struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.slaves.connected metric with initial data.
func (m *metricRedisSlavesConnected) init() {
	m.data.SetName("redis.slaves.connected")
	m.data.SetDescription("Number of connected replicas")
	m.data.SetUnit("")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisSlavesConnected) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisSlavesConnected) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisSlavesConnected) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisSlavesConnected(settings MetricSettings) metricRedisSlavesConnected {
	m := metricRedisSlavesConnected{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricRedisUptime struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills redis.uptime metric with initial data.
func (m *metricRedisUptime) init() {
	m.data.SetName("redis.uptime")
	m.data.SetDescription("Number of seconds since Redis server start")
	m.data.SetUnit("s")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricRedisUptime) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricRedisUptime) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricRedisUptime) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricRedisUptime(settings MetricSettings) metricRedisUptime {
	m := metricRedisUptime{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                                    pcommon.Timestamp // start time that will be applied to all recorded data points.
	metricsCapacity                              int               // maximum observed number of metrics per resource.
	resourceCapacity                             int               // maximum observed number of resource attributes.
	metricsBuffer                                pmetric.Metrics   // accumulates metrics data before emitting.
	metricRedisClientsBlocked                    metricRedisClientsBlocked
	metricRedisClientsConnected                  metricRedisClientsConnected
	metricRedisClientsMaxInputBuffer             metricRedisClientsMaxInputBuffer
	metricRedisClientsMaxOutputBuffer            metricRedisClientsMaxOutputBuffer
	metricRedisCommands                          metricRedisCommands
	metricRedisCommandsProcessed                 metricRedisCommandsProcessed
	metricRedisConnectionsReceived               metricRedisConnectionsReceived
	metricRedisConnectionsRejected               metricRedisConnectionsRejected
	metricRedisCPUTime                           metricRedisCPUTime
	metricRedisDbAvgTTL                          metricRedisDbAvgTTL
	metricRedisDbExpires                         metricRedisDbExpires
	metricRedisDbKeys                            metricRedisDbKeys
	metricRedisKeysEvicted                       metricRedisKeysEvicted
	metricRedisKeysExpired                       metricRedisKeysExpired
	metricRedisKeyspaceHits                      metricRedisKeyspaceHits
	metricRedisKeyspaceMisses                    metricRedisKeyspaceMisses
	metricRedisLatencystatP100                   metricRedisLatencystatP100
	metricRedisLatencystatP50                    metricRedisLatencystatP50
	metricRedisLatencystatP90                    metricRedisLatencystatP90
	metricRedisLatencystatP99                    metricRedisLatencystatP99
	metricRedisLatencystatP999                   metricRedisLatencystatP999
	metricRedisLatestFork                        metricRedisLatestFork
	metricRedisMemoryFragmentationRatio          metricRedisMemoryFragmentationRatio
	metricRedisMemoryLua                         metricRedisMemoryLua
	metricRedisMemoryPeak                        metricRedisMemoryPeak
	metricRedisMemoryRss                         metricRedisMemoryRss
	metricRedisMemoryUsed                        metricRedisMemoryUsed
	metricRedisNetInput                          metricRedisNetInput
	metricRedisNetOutput                         metricRedisNetOutput
	metricRedisRdbChangesSinceLastSave           metricRedisRdbChangesSinceLastSave
	metricRedisReplicationBacklogFirstByteOffset metricRedisReplicationBacklogFirstByteOffset
	metricRedisReplicationOffset                 metricRedisReplicationOffset
	metricRedisSlavesConnected                   metricRedisSlavesConnected
	metricRedisUptime                            metricRedisUptime
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                                    pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                                pmetric.NewMetrics(),
		metricRedisClientsBlocked:                    newMetricRedisClientsBlocked(settings.RedisClientsBlocked),
		metricRedisClientsConnected:                  newMetricRedisClientsConnected(settings.RedisClientsConnected),
		metricRedisClientsMaxInputBuffer:             newMetricRedisClientsMaxInputBuffer(settings.RedisClientsMaxInputBuffer),
		metricRedisClientsMaxOutputBuffer:            newMetricRedisClientsMaxOutputBuffer(settings.RedisClientsMaxOutputBuffer),
		metricRedisCommands:                          newMetricRedisCommands(settings.RedisCommands),
		metricRedisCommandsProcessed:                 newMetricRedisCommandsProcessed(settings.RedisCommandsProcessed),
		metricRedisConnectionsReceived:               newMetricRedisConnectionsReceived(settings.RedisConnectionsReceived),
		metricRedisConnectionsRejected:               newMetricRedisConnectionsRejected(settings.RedisConnectionsRejected),
		metricRedisCPUTime:                           newMetricRedisCPUTime(settings.RedisCPUTime),
		metricRedisDbAvgTTL:                          newMetricRedisDbAvgTTL(settings.RedisDbAvgTTL),
		metricRedisDbExpires:                         newMetricRedisDbExpires(settings.RedisDbExpires),
		metricRedisDbKeys:                            newMetricRedisDbKeys(settings.RedisDbKeys),
		metricRedisKeysEvicted:                       newMetricRedisKeysEvicted(settings.RedisKeysEvicted),
		metricRedisKeysExpired:                       newMetricRedisKeysExpired(settings.RedisKeysExpired),
		metricRedisKeyspaceHits:                      newMetricRedisKeyspaceHits(settings.RedisKeyspaceHits),
		metricRedisKeyspaceMisses:                    newMetricRedisKeyspaceMisses(settings.RedisKeyspaceMisses),
		metricRedisLatencystatP100:                   newMetricRedisLatencystatP100(settings.RedisLatencystatP100),
		metricRedisLatencystatP50:                    newMetricRedisLatencystatP50(settings.RedisLatencystatP50),
		metricRedisLatencystatP90:                    newMetricRedisLatencystatP90(settings.RedisLatencystatP90),
		metricRedisLatencystatP99:                    newMetricRedisLatencystatP99(settings.RedisLatencystatP99),
		metricRedisLatencystatP999:                   newMetricRedisLatencystatP999(settings.RedisLatencystatP999),
		metricRedisLatestFork:                        newMetricRedisLatestFork(settings.RedisLatestFork),
		metricRedisMemoryFragmentationRatio:          newMetricRedisMemoryFragmentationRatio(settings.RedisMemoryFragmentationRatio),
		metricRedisMemoryLua:                         newMetricRedisMemoryLua(settings.RedisMemoryLua),
		metricRedisMemoryPeak:                        newMetricRedisMemoryPeak(settings.RedisMemoryPeak),
		metricRedisMemoryRss:                         newMetricRedisMemoryRss(settings.RedisMemoryRss),
		metricRedisMemoryUsed:                        newMetricRedisMemoryUsed(settings.RedisMemoryUsed),
		metricRedisNetInput:                          newMetricRedisNetInput(settings.RedisNetInput),
		metricRedisNetOutput:                         newMetricRedisNetOutput(settings.RedisNetOutput),
		metricRedisRdbChangesSinceLastSave:           newMetricRedisRdbChangesSinceLastSave(settings.RedisRdbChangesSinceLastSave),
		metricRedisReplicationBacklogFirstByteOffset: newMetricRedisReplicationBacklogFirstByteOffset(settings.RedisReplicationBacklogFirstByteOffset),
		metricRedisReplicationOffset:                 newMetricRedisReplicationOffset(settings.RedisReplicationOffset),
		metricRedisSlavesConnected:                   newMetricRedisSlavesConnected(settings.RedisSlavesConnected),
		metricRedisUptime:                            newMetricRedisUptime(settings.RedisUptime),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceOption applies changes to provided resource.
type ResourceOption func(pcommon.Resource)

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead. Resource attributes should be provided as ResourceOption arguments.
func (mb *MetricsBuilder) EmitForResource(ro ...ResourceOption) {
	rm := pmetric.NewResourceMetrics()
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	for _, op := range ro {
		op(rm.Resource())
	}
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/redisreceiver")
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricRedisClientsBlocked.emit(ils.Metrics())
	mb.metricRedisClientsConnected.emit(ils.Metrics())
	mb.metricRedisClientsMaxInputBuffer.emit(ils.Metrics())
	mb.metricRedisClientsMaxOutputBuffer.emit(ils.Metrics())
	mb.metricRedisCommands.emit(ils.Metrics())
	mb.metricRedisCommandsProcessed.emit(ils.Metrics())
	mb.metricRedisConnectionsReceived.emit(ils.Metrics())
	mb.metricRedisConnectionsRejected.emit(ils.Metrics())
	mb.metricRedisCPUTime.emit(ils.Metrics())
	mb.metricRedisDbAvgTTL.emit(ils.Metrics())
	mb.metricRedisDbExpires.emit(ils.Metrics())
	mb.metricRedisDbKeys.emit(ils.Metrics())
	mb.metricRedisKeysEvicted.emit(ils.Metrics())
	mb.metricRedisKeysExpired.emit(ils.Metrics())
	mb.metricRedisKeyspaceHits.emit(ils.Metrics())
	mb.metricRedisKeyspaceMisses.emit(ils.Metrics())
	mb.metricRedisLatencystatP100.emit(ils.Metrics())
	mb.metricRedisLatencystatP50.emit(ils.Metrics())
	mb.metricRedisLatencystatP90.emit(ils.Metrics())
	mb.metricRedisLatencystatP99.emit(ils.Metrics())
	mb.metricRedisLatencystatP999.emit(ils.Metrics())
	mb.metricRedisLatestFork.emit(ils.Metrics())
	mb.metricRedisMemoryFragmentationRatio.emit(ils.Metrics())
	mb.metricRedisMemoryLua.emit(ils.Metrics())
	mb.metricRedisMemoryPeak.emit(ils.Metrics())
	mb.metricRedisMemoryRss.emit(ils.Metrics())
	mb.metricRedisMemoryUsed.emit(ils.Metrics())
	mb.metricRedisNetInput.emit(ils.Metrics())
	mb.metricRedisNetOutput.emit(ils.Metrics())
	mb.metricRedisRdbChangesSinceLastSave.emit(ils.Metrics())
	mb.metricRedisReplicationBacklogFirstByteOffset.emit(ils.Metrics())
	mb.metricRedisReplicationOffset.emit(ils.Metrics())
	mb.metricRedisSlavesConnected.emit(ils.Metrics())
	mb.metricRedisUptime.emit(ils.Metrics())
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(ro ...ResourceOption) pmetric.Metrics {
	mb.EmitForResource(ro...)
	metrics := pmetric.NewMetrics()
	mb.metricsBuffer.MoveTo(metrics)
	return metrics
}

// RecordRedisClientsBlockedDataPoint adds a data point to redis.clients.blocked metric.
func (mb *MetricsBuilder) RecordRedisClientsBlockedDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisClientsBlocked.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisClientsConnectedDataPoint adds a data point to redis.clients.connected metric.
func (mb *MetricsBuilder) RecordRedisClientsConnectedDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisClientsConnected.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisClientsMaxInputBufferDataPoint adds a data point to redis.clients.max_input_buffer metric.
func (mb *MetricsBuilder) RecordRedisClientsMaxInputBufferDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisClientsMaxInputBuffer.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisClientsMaxOutputBufferDataPoint adds a data point to redis.clients.max_output_buffer metric.
func (mb *MetricsBuilder) RecordRedisClientsMaxOutputBufferDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisClientsMaxOutputBuffer.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisCommandsDataPoint adds a data point to redis.commands metric.
func (mb *MetricsBuilder) RecordRedisCommandsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisCommands.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisCommandsProcessedDataPoint adds a data point to redis.commands.processed metric.
func (mb *MetricsBuilder) RecordRedisCommandsProcessedDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisCommandsProcessed.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisConnectionsReceivedDataPoint adds a data point to redis.connections.received metric.
func (mb *MetricsBuilder) RecordRedisConnectionsReceivedDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisConnectionsReceived.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisConnectionsRejectedDataPoint adds a data point to redis.connections.rejected metric.
func (mb *MetricsBuilder) RecordRedisConnectionsRejectedDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisConnectionsRejected.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisCPUTimeDataPoint adds a data point to redis.cpu.time metric.
func (mb *MetricsBuilder) RecordRedisCPUTimeDataPoint(ts pcommon.Timestamp, val float64, stateAttributeValue string) {
	mb.metricRedisCPUTime.recordDataPoint(mb.startTime, ts, val, stateAttributeValue)
}

// RecordRedisDbAvgTTLDataPoint adds a data point to redis.db.avg_ttl metric.
func (mb *MetricsBuilder) RecordRedisDbAvgTTLDataPoint(ts pcommon.Timestamp, val int64, dbAttributeValue string) {
	mb.metricRedisDbAvgTTL.recordDataPoint(mb.startTime, ts, val, dbAttributeValue)
}

// RecordRedisDbExpiresDataPoint adds a data point to redis.db.expires metric.
func (mb *MetricsBuilder) RecordRedisDbExpiresDataPoint(ts pcommon.Timestamp, val int64, dbAttributeValue string) {
	mb.metricRedisDbExpires.recordDataPoint(mb.startTime, ts, val, dbAttributeValue)
}

// RecordRedisDbKeysDataPoint adds a data point to redis.db.keys metric.
func (mb *MetricsBuilder) RecordRedisDbKeysDataPoint(ts pcommon.Timestamp, val int64, dbAttributeValue string) {
	mb.metricRedisDbKeys.recordDataPoint(mb.startTime, ts, val, dbAttributeValue)
}

// RecordRedisKeysEvictedDataPoint adds a data point to redis.keys.evicted metric.
func (mb *MetricsBuilder) RecordRedisKeysEvictedDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisKeysEvicted.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisKeysExpiredDataPoint adds a data point to redis.keys.expired metric.
func (mb *MetricsBuilder) RecordRedisKeysExpiredDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisKeysExpired.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisKeyspaceHitsDataPoint adds a data point to redis.keyspace.hits metric.
func (mb *MetricsBuilder) RecordRedisKeyspaceHitsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisKeyspaceHits.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisKeyspaceMissesDataPoint adds a data point to redis.keyspace.misses metric.
func (mb *MetricsBuilder) RecordRedisKeyspaceMissesDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisKeyspaceMisses.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisLatencystatP100DataPoint adds a data point to redis.latencystat.p100 metric.
func (mb *MetricsBuilder) RecordRedisLatencystatP100DataPoint(ts pcommon.Timestamp, val float64, commandAttributeValue string) {
	mb.metricRedisLatencystatP100.recordDataPoint(mb.startTime, ts, val, commandAttributeValue)
}

// RecordRedisLatencystatP50DataPoint adds a data point to redis.latencystat.p50 metric.
func (mb *MetricsBuilder) RecordRedisLatencystatP50DataPoint(ts pcommon.Timestamp, val float64, commandAttributeValue string) {
	mb.metricRedisLatencystatP50.recordDataPoint(mb.startTime, ts, val, commandAttributeValue)
}

// RecordRedisLatencystatP90DataPoint adds a data point to redis.latencystat.p90 metric.
func (mb *MetricsBuilder) RecordRedisLatencystatP90DataPoint(ts pcommon.Timestamp, val float64, commandAttributeValue string) {
	mb.metricRedisLatencystatP90.recordDataPoint(mb.startTime, ts, val, commandAttributeValue)
}

// RecordRedisLatencystatP99DataPoint adds a data point to redis.latencystat.p99 metric.
func (mb *MetricsBuilder) RecordRedisLatencystatP99DataPoint(ts pcommon.Timestamp, val float64, commandAttributeValue string) {
	mb.metricRedisLatencystatP99.recordDataPoint(mb.startTime, ts, val, commandAttributeValue)
}

// RecordRedisLatencystatP999DataPoint adds a data point to redis.latencystat.p99.9 metric.
func (mb *MetricsBuilder) RecordRedisLatencystatP999DataPoint(ts pcommon.Timestamp, val float64, commandAttributeValue string) {
	mb.metricRedisLatencystatP999.recordDataPoint(mb.startTime, ts, val, commandAttributeValue)
}

// RecordRedisLatestForkDataPoint adds a data point to redis.latest_fork metric.
func (mb *MetricsBuilder) RecordRedisLatestForkDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisLatestFork.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisMemoryFragmentationRatioDataPoint adds a data point to redis.memory.fragmentation_ratio metric.
func (mb *MetricsBuilder) RecordRedisMemoryFragmentationRatioDataPoint(ts pcommon.Timestamp, val float64) {
	mb.metricRedisMemoryFragmentationRatio.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisMemoryLuaDataPoint adds a data point to redis.memory.lua metric.
func (mb *MetricsBuilder) RecordRedisMemoryLuaDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisMemoryLua.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisMemoryPeakDataPoint adds a data point to redis.memory.peak metric.
func (mb *MetricsBuilder) RecordRedisMemoryPeakDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisMemoryPeak.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisMemoryRssDataPoint adds a data point to redis.memory.rss metric.
func (mb *MetricsBuilder) RecordRedisMemoryRssDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisMemoryRss.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisMemoryUsedDataPoint adds a data point to redis.memory.used metric.
func (mb *MetricsBuilder) RecordRedisMemoryUsedDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisMemoryUsed.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisNetInputDataPoint adds a data point to redis.net.input metric.
func (mb *MetricsBuilder) RecordRedisNetInputDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisNetInput.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisNetOutputDataPoint adds a data point to redis.net.output metric.
func (mb *MetricsBuilder) RecordRedisNetOutputDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisNetOutput.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisRdbChangesSinceLastSaveDataPoint adds a data point to redis.rdb.changes_since_last_save metric.
func (mb *MetricsBuilder) RecordRedisRdbChangesSinceLastSaveDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisRdbChangesSinceLastSave.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisReplicationBacklogFirstByteOffsetDataPoint adds a data point to redis.replication.backlog_first_byte_offset metric.
func (mb *MetricsBuilder) RecordRedisReplicationBacklogFirstByteOffsetDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisReplicationBacklogFirstByteOffset.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisReplicationOffsetDataPoint adds a data point to redis.replication.offset metric.
func (mb *MetricsBuilder) RecordRedisReplicationOffsetDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisReplicationOffset.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisSlavesConnectedDataPoint adds a data point to redis.slaves.connected metric.
func (mb *MetricsBuilder) RecordRedisSlavesConnectedDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisSlavesConnected.recordDataPoint(mb.startTime, ts, val)
}

// RecordRedisUptimeDataPoint adds a data point to redis.uptime metric.
func (mb *MetricsBuilder) RecordRedisUptimeDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricRedisUptime.recordDataPoint(mb.startTime, ts, val)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// Command (Redis command in latency stats with specific percentile)
	Command string
	// Db (Redis database identifier)
	Db string
	// State (Redis CPU usage state)
	State string
}{
	"command",
	"db",
	"state",
}

// A is an alias for Attributes.
var A = Attributes
